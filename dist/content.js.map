{
  "version": 3,
  "sources": ["../src/utils.ts", "../src/content.ts"],
  "sourcesContent": ["/**\n * Parse view count text into a number\n * Handles formats: \"1,234\", \"5.6 K\", \"1.2 M\"\n */\nexport function parseViews(text: string): number | null {\n  if (!text) return null;\n  \n  const match = text.match(/^([\\d,.]+)\\s*([KkMm])?$/);\n  if (!match) return null;\n  \n  const [, numberStr, suffix] = match;\n  const baseNumber = parseFloat(numberStr.replace(/,/g, ''));\n  \n  if (isNaN(baseNumber)) return null;\n  \n  const multiplier = suffix ? (suffix.toLowerCase() === 'k' ? 1000 : 1000000) : 1;\n  return Math.floor(baseNumber * multiplier);\n}\n\nexport interface Keyword {\n  text: string;\n  color: string;\n  enabled: boolean;\n}\n\n// Predefined colors for keyword highlighting\nexport const KEYWORD_COLORS = [\n  '#FFD700', // Gold\n  '#FF6B6B', // Red\n  '#4ECDC4', // Teal\n  '#45B7D1', // Blue\n  '#96CEB4', // Green\n  '#FFEAA7', // Yellow\n  '#DDA0DD', // Plum\n  '#F39C12', // Orange\n];\n\n/**\n * Get the next available color for a new keyword\n */\nexport function getNextKeywordColor(existingKeywords: Keyword[]): string {\n  const usedColors = existingKeywords.map(k => k.color);\n  const availableColor = KEYWORD_COLORS.find(color => !usedColors.includes(color));\n  return availableColor || KEYWORD_COLORS[0];\n}\n\n/**\n * Highlight keywords in text content of an element\n */\nexport function highlightKeywords(element: HTMLElement, keywords: Keyword[]): void {\n  if (!keywords.length) return;\n  \n  const enabledKeywords = keywords.filter(k => k.enabled);\n  if (!enabledKeywords.length) return;\n  \n  // Walk through text nodes only\n  const walker = document.createTreeWalker(\n    element,\n    NodeFilter.SHOW_TEXT,\n    {\n      acceptNode: (node) => {\n        // Skip if parent is already a highlight or is a link/button\n        const parent = node.parentNode as Element;\n        if (parent && (\n          parent.tagName === 'MARK' ||\n          parent.tagName === 'A' ||\n          parent.tagName === 'BUTTON' ||\n          parent.closest('a, button')\n        )) {\n          return NodeFilter.FILTER_REJECT;\n        }\n        return NodeFilter.FILTER_ACCEPT;\n      }\n    }\n  );\n\n  const textNodes: Text[] = [];\n  let node;\n  while (node = walker.nextNode()) {\n    textNodes.push(node as Text);\n  }\n\n  textNodes.forEach(textNode => {\n    let content = textNode.textContent || '';\n    if (!content.trim()) return;\n\n    let hasChanges = false;\n    let newHTML = content;\n\n    enabledKeywords.forEach(keyword => {\n      // Simple case-insensitive whole word matching\n      const regex = new RegExp(`\\\\b(${escapeRegex(keyword.text)})\\\\b`, 'gi');\n      const replacement = `<mark style=\"background-color: ${keyword.color}; padding: 1px 2px; border-radius: 2px;\">$1</mark>`;\n      \n      if (regex.test(newHTML)) {\n        newHTML = newHTML.replace(regex, replacement);\n        hasChanges = true;\n      }\n    });\n\n    if (hasChanges) {\n      const span = document.createElement('span');\n      span.innerHTML = newHTML;\n      textNode.parentNode?.replaceChild(span, textNode);\n    }\n  });\n}\n\n/**\n * Remove all keyword highlights from an element\n */\nexport function removeKeywordHighlights(element: HTMLElement): void {\n  const marks = element.querySelectorAll('mark');\n  marks.forEach(mark => {\n    const textNode = document.createTextNode(mark.textContent || '');\n    mark.parentNode?.replaceChild(textNode, mark);\n  });\n  \n  // Clean up any empty spans created by highlighting\n  const spans = element.querySelectorAll('span:empty');\n  spans.forEach(span => span.remove());\n}\n\n/**\n * Escape special regex characters\n */\nfunction escapeRegex(text: string): string {\n  return text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n} ", "// Tweet Heat Map - Content Script\n// Color-codes tweets by view-count and flags fresh ones with \uD83D\uDD25\n\nimport { parseViews, Keyword, highlightKeywords, removeKeywordHighlights } from './utils.js';\n\ninterface Settings {\n  enabled: boolean;\n}\n\n// Color thresholds as defined in PRD\nconst VIEW_THRESHOLDS = [\n  { min: 0, max: 1000, className: 'views-0' },\n  { min: 1001, max: 10000, className: 'views-1' },\n  { min: 10001, max: 50000, className: 'views-2' },\n  { min: 50001, max: 250000, className: 'views-3' },\n];\n\n// CSS for the heat map colors\nconst HEAT_MAP_CSS = `\n  .views-1 { border-right: 5px solid #B4C6FF !important; }\n  .views-2 { border-right: 5px solid #BDF4C4 !important; }\n  .views-3 { border-right: 5px solid #FFC2C2 !important; }\n`;\n\nlet settings: Settings = { enabled: true };\nlet keywords: Keyword[] = [];\nlet observer: MutationObserver | null = null;\nlet styleElement: HTMLStyleElement | null = null;\n\n/**\n * Get the appropriate CSS class for a view count\n */\nfunction getViewsClass(viewCount: number): string {\n  for (const threshold of VIEW_THRESHOLDS) {\n    if (viewCount >= threshold.min && viewCount <= threshold.max) {\n      return threshold.className;\n    }\n  }\n  // For counts above our highest threshold, use the highest class\n  return VIEW_THRESHOLDS[VIEW_THRESHOLDS.length - 1].className;\n}\n\n/**\n * Check if a tweet is fresh (\u2264 30 minutes old)\n */\nfunction isTweetFresh(timeElement: HTMLTimeElement): boolean {\n  const datetime = timeElement.getAttribute('datetime');\n  if (!datetime) return false;\n  \n  const tweetTime = new Date(datetime);\n  const now = new Date();\n  const diffMinutes = (now.getTime() - tweetTime.getTime()) / (1000 * 60);\n  \n  return diffMinutes <= 30;\n}\n\n/**\n * Add or remove \uD83D\uDD25 emoji from tweet timestamp\n */\nfunction updateFireEmoji(timeElement: HTMLTimeElement, shouldAdd: boolean): void {\n  const textContent = timeElement.textContent || '';\n  const hasEmoji = textContent.startsWith('\uD83D\uDD25 ');\n  \n  if (shouldAdd && !hasEmoji) {\n    timeElement.textContent = '\uD83D\uDD25 ' + textContent;\n  } else if (!shouldAdd && hasEmoji) {\n    timeElement.textContent = textContent.replace('\uD83D\uDD25 ', '');\n  }\n}\n\nfunction getTargetContainer(articleEl: HTMLElement): HTMLElement {\n  // Twitter wraps each <article> in a div that tends not to get replaced on\n  // hover.  Using the parent keeps our class from being stripped during\n  // dynamic re-renders.\n  return (articleEl.parentElement as HTMLElement) || articleEl;\n}\n\n/**\n * Apply heat map styling and keyword highlighting to a tweet article element\n */\nfunction applyHeat(articleEl: HTMLElement): void {\n  if (!settings.enabled) return;\n\n  try {\n    const targetEl = getTargetContainer(articleEl);\n\n    // Heat map styling\n    const viewsElement = articleEl.querySelector(\n      'a[aria-label*=\" views\" i], [data-testid=\"viewCount\"]'\n    );\n\n    if (viewsElement) {\n      let rawCount = '';\n      const label = viewsElement.getAttribute('aria-label') || '';\n      rawCount = label.trim().split(' ')[0];\n\n      const viewCount = parseViews(rawCount);\n\n      if (viewCount === null) {\n        return; // Not a parsable number\n      }\n\n      // Remove existing view classes\n      VIEW_THRESHOLDS.forEach(threshold => {\n        targetEl.classList.remove(threshold.className);\n      });\n\n      // Add appropriate class\n      const className = getViewsClass(viewCount);\n      if (className !== 'views-0') {\n        targetEl.classList.add(className);\n      }\n    }\n\n    // Handle fire emoji for fresh tweets\n    const timeElement = articleEl.querySelector('time') as HTMLTimeElement;\n    if (timeElement) {\n      const isFresh = isTweetFresh(timeElement);\n      updateFireEmoji(timeElement, isFresh);\n    }\n\n    // Apply keyword highlighting to tweet text\n    const tweetTextElement = articleEl.querySelector('[data-testid=\"tweetText\"]');\n    if (tweetTextElement && keywords.length > 0) {\n      highlightKeywords(tweetTextElement as HTMLElement, keywords);\n    }\n  } catch (error) {\n    // Silent catch\n  }\n}\n\n/**\n * Remove heat map styling and keyword highlights from a tweet\n */\nfunction removeHeat(articleEl: HTMLElement): void {\n  const targetEl = getTargetContainer(articleEl);\n\n  // Remove all view classes\n  VIEW_THRESHOLDS.forEach(threshold => {\n    targetEl.classList.remove(threshold.className);\n  });\n\n  // Remove fire emoji\n  const timeElement = articleEl.querySelector('time') as HTMLTimeElement;\n  if (timeElement) {\n    updateFireEmoji(timeElement, false);\n  }\n\n  // Remove keyword highlights\n  const tweetTextElement = articleEl.querySelector('[data-testid=\"tweetText\"]');\n  if (tweetTextElement) {\n    removeKeywordHighlights(tweetTextElement as HTMLElement);\n  }\n}\n\n/**\n * Scan existing tweets on the page\n */\nfunction scanExisting(): void {\n  const tweets = document.querySelectorAll('article[data-testid=\"tweet\"]');\n  tweets.forEach(tweet => {\n    if (settings.enabled) {\n      applyHeat(tweet as HTMLElement);\n    } else {\n      removeHeat(tweet as HTMLElement);\n    }\n  });\n}\n\n/**\n * Set up mutation observer to watch for new tweets\n */\nfunction observeNew(): void {\n  if (observer) return;\n\n  const targetNode = document.querySelector('main');\n  if (!targetNode) return;\n\n  observer = new MutationObserver(mutations => {\n    const processChanges = () => {\n      mutations.forEach(mutation => {\n        // Case 1: New nodes were added to the DOM\n        mutation.addedNodes.forEach(node => {\n          if (node.nodeType !== Node.ELEMENT_NODE) return;\n          const element = node as Element;\n          if (element.matches('article[data-testid=\"tweet\"]')) {\n            applyHeat(element as HTMLElement);\n          }\n          element\n            .querySelectorAll('article[data-testid=\"tweet\"]')\n            .forEach(tweet => {\n              applyHeat(tweet as HTMLElement);\n            });\n        });\n\n        // Case 2: An attribute changed on a tweet or its child,\n        // which can happen when Twitter rewrites classes on hover.\n        if (mutation.type === 'attributes') {\n          const parentTweet = (mutation.target as Element).closest(\n            'article[data-testid=\"tweet\"]'\n          );\n          if (parentTweet) {\n            applyHeat(parentTweet as HTMLElement);\n          }\n        }\n      });\n    };\n\n    if ('requestIdleCallback' in window) {\n      requestIdleCallback(processChanges);\n    } else {\n      setTimeout(processChanges, 0);\n    }\n  });\n\n  observer.observe(targetNode, {\n    childList: true,\n    subtree: true,\n    attributes: true,\n  });\n}\n\n/**\n * Inject CSS styles into the page\n */\nfunction injectStyles(): void {\n  if (styleElement) return;\n  \n  styleElement = document.createElement('style');\n  styleElement.id = 'thm-styles';\n  styleElement.textContent = HEAT_MAP_CSS;\n  document.head.appendChild(styleElement);\n}\n\n/**\n * Remove CSS styles from the page\n */\nfunction removeStyles(): void {\n  if (styleElement) {\n    styleElement.remove();\n    styleElement = null;\n  }\n}\n\n/**\n * Update extension state based on settings\n */\nfunction updateExtensionState(): void {\n  if (observer) {\n    observer.disconnect();\n    observer = null;\n  }\n\n  if (settings.enabled) {\n    injectStyles();\n    scanExisting();\n    observeNew();\n  } else {\n    removeStyles();\n    scanExisting(); // This will remove heat from existing tweets\n  }\n}\n\n/**\n * Load settings from chrome.storage\n */\nasync function loadSettings(): Promise<void> {\n  try {\n    const result = await chrome.storage.sync.get(['thm-settings']);\n    if (result['thm-settings']) {\n      settings = { ...settings, ...result['thm-settings'] };\n    }\n  } catch (error) {\n    console.debug('Tweet Heat Map: Error loading settings', error);\n  }\n}\n\n/**\n * Load keywords from chrome.storage\n */\nasync function loadKeywords(): Promise<void> {\n  try {\n    const result = await chrome.storage.sync.get(['thm-keywords']);\n    keywords = result['thm-keywords'] || [];\n  } catch (error) {\n    console.debug('Tweet Heat Map: Error loading keywords', error);\n  }\n}\n\n/**\n * Listen for settings and keyword changes\n */\nfunction setupStorageListener(): void {\n  chrome.storage.onChanged.addListener((changes, namespace) => {\n    if (namespace === 'sync') {\n      let shouldUpdate = false;\n      \n      if (changes['thm-settings']) {\n        const newSettings = changes['thm-settings'].newValue;\n        if (newSettings) {\n          settings = { ...settings, ...newSettings };\n          shouldUpdate = true;\n        }\n      }\n      \n      if (changes['thm-keywords']) {\n        const newKeywords = changes['thm-keywords'].newValue;\n        keywords = newKeywords || [];\n        shouldUpdate = true;\n      }\n      \n      if (shouldUpdate) {\n        updateExtensionState();\n      }\n    }\n  });\n}\n\n/**\n * Clean up when page unloads\n */\nfunction setupCleanup(): void {\n  window.addEventListener('beforeunload', () => {\n    if (observer) {\n      observer.disconnect();\n      observer = null;\n    }\n  });\n}\n\n/**\n * Initialize the extension by waiting for the main timeline to be ready.\n */\nasync function init(): Promise<void> {\n  await loadSettings();\n  await loadKeywords();\n  setupStorageListener();\n  setupCleanup();\n\n  const runLogic = () => {\n    updateExtensionState();\n  };\n\n  // Check if the main element is already there. If so, run.\n  // If not, use a MutationObserver to wait for it.\n  const mainEl = document.querySelector('main');\n  if (mainEl) {\n    runLogic();\n  } else {\n    const initialObserver = new MutationObserver((mutations, obs) => {\n      if (document.querySelector('main')) {\n        obs.disconnect();\n        runLogic();\n      }\n    });\n    initialObserver.observe(document.body, {\n      childList: true,\n      subtree: true,\n    });\n  }\n}\n\n// Start the extension\ninit().catch(error => {\n  console.error('Tweet Heat Map: Initialization failed', error);\n}); "],
  "mappings": "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",
  "names": ["keywords", "node"]
}
